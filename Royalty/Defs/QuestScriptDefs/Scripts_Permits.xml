<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <QuestScriptDef>
    <defName>Permit_CallShuttle</defName>
    <isRootSpecial>true</isRootSpecial>
    <autoAccept>true</autoAccept>
    <defaultHidden>true</defaultHidden>
    <questDescriptionAndNameRules>
      <rulesStrings>
        <li>questName->Permit Shuttle</li>
        <li>questDescription-></li>
      </rulesStrings>
    </questDescriptionAndNameRules>
    <root Class="QuestNode_Sequence">
      <nodes>

        <li Class="QuestNode_Set">
          <name>shuttleReturnDays</name>
          <value>5</value>
        </li>
        <li Class="QuestNode_Set">
          <name>goodwillChangeOnShuttleDestroyed</name>
          <value>-25</value>
        </li>

        <!-- Generate shuttle -->
        <li Class="QuestNode_GenerateShuttle">
          <storeAs>shuttle</storeAs>
          <permitShuttle>true</permitShuttle>
          <hideControls>true</hideControls> <!-- Controls are handled by CompLaunchable -->
        </li>
        <li Class="QuestNode_SpawnSkyfaller">
          <skyfallerDef>ShuttleIncoming</skyfallerDef>
          <innerThings>$shuttle</innerThings>
          <cell>$landingCell</cell>
          <lookForSafeSpot>True</lookForSafeSpot>
          <tryLandInShipLandingZone>True</tryLandInShipLandingZone>
        </li>
        <li Class="QuestNode_Letter">
          <label TKey="LetterLabelPermitShuttleArrived">Shuttle arrived</label>
          <text TKey="LetterTextPermitShuttleArrived">The shuttle called by [asker_nameDef] has arrived.\n\nIf you don't use the shuttle, it will return to [permitFaction_name] in [shuttleReturnDays] days.</text>
          <lookTargets>$shuttle</lookTargets>
        </li>

        <!-- Shuttle is destroyed -->
        <li Class="QuestNode_SignalActivable">
          <inSignal>shuttle.Destroyed</inSignal>
          <inSignalDisable>shuttle.SentSatisfied</inSignalDisable>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_ChangeFactionGoodwill">
                <faction>$permitFaction</faction>
                <change>$goodwillChangeOnShuttleDestroyed</change>
                <reason TKey="GoodwillChangeReasonShuttleDestroyed">shuttle destroyed</reason>
              </li>
              <li Class="QuestNode_End" />
            </nodes>
          </node>
        </li>

        <!-- Shuttle leaves on its own -->
        <li Class="QuestNode_ShuttleLeaveDelay">
          <delayTicks>$($shuttleReturnDays * 60000)</delayTicks>
          <shuttle>$shuttle</shuttle>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelPermitShuttleLeft">Shuttle left</label>
                <text TKey="LetterTextPermitShuttleLeft">The shuttle from [permitFaction_name] has departed after being made to wait for too long.</text>
              </li>
              <li Class="QuestNode_SendShuttleAway">
                <shuttle>$shuttle</shuttle>
                <dropEverything>true</dropEverything>
              </li>
              <li Class="QuestNode_End"/>
            </nodes>
          </node>
        </li>

        <!-- End if the shuttle has been sent. Always satisfied, since it does not require anything. -->
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.SentSatisfied</inSignal>
          <node Class="QuestNode_End" />
        </li>

        <!-- End if the permit's faction becomes hostile -->
        <li Class="QuestNode_Signal">
          <inSignal>permitFaction.BecameHostileToPlayer</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SendShuttleAway">
                <shuttle>$shuttle</shuttle>
                <dropEverything>true</dropEverything>
              </li>
              <li Class="QuestNode_End" />
            </nodes>
          </node>
        </li>
        
      </nodes>
    </root>
  </QuestScriptDef>

  <QuestScriptDef>
    <defName>Permit_CallLaborers</defName>
    <isRootSpecial>true</isRootSpecial>
    <autoAccept>true</autoAccept>
    <defaultHidden>true</defaultHidden>
    <questDescriptionAndNameRules>
      <rulesStrings>
        <li>questName->Laborers</li>
        <li>questDescription-></li>
      </rulesStrings>
    </questDescriptionAndNameRules>
    <root Class="QuestNode_Sequence">
      <nodes>

        <!-- Generate laborers -->
        <li Class="QuestNode_LoopCount">
          <loopCount>$laborersCount</loopCount>
          <node Class="QuestNode_GeneratePawn">
            <kindDef>$laborersPawnKind</kindDef>
            <faction>$permitFaction</faction>
            <addToList>laborers</addToList>
            <allowAddictions>false</allowAddictions>
            <biocodeWeaponChance>1</biocodeWeaponChance>
            <biocodeApparelChance>1</biocodeApparelChance>
          </node>
        </li>
        <!-- Lock their apparel -->
        <li Class="QuestNode_SetAllApparelLocked">
          <pawns>$laborers</pawns>
        </li>
        <!-- Disable all work except labor -->
        <li Class="QuestNode_WorkDisabled">
          <pawns>$laborers</pawns>
          <disabledWorkTags>
            <li>Violent</li>
            <li>Social</li>
            <li>Intellectual</li>
            <li>Animals</li>
          </disabledWorkTags>
        </li>
        <!-- Give on duty thought -->
        <li Class="QuestNode_AddMemoryThought">
          <pawns>$laborers</pawns>
          <def>OnDuty</def>
        </li>
        
        <li Class="QuestNode_ExtraFaction">
          <faction>$permitFaction</faction>
          <pawns>$laborers</pawns>
          <factionType>HomeFaction</factionType>
          <inSignalRemovePawn>laborers.RanWild</inSignalRemovePawn>
        </li>
        <li Class="QuestNode_JoinPlayer">
          <pawns>$laborers</pawns>
          <joinPlayer>True</joinPlayer>
          <makePrisoners>False</makePrisoners>
        </li>
        <li Class="QuestNode_LeaveOnCleanup">
          <pawns>$laborers</pawns>
          <sendStandardLetter>false</sendStandardLetter>
          <inSignalRemovePawn>laborers.RanWild</inSignalRemovePawn>
        </li>

        <!-- Laborers arrive by shuttle -->
        <li Class="QuestNode_GenerateShuttle">
          <storeAs>arrivalShuttle</storeAs>
          <dropEverythingOnArrival>true</dropEverythingOnArrival>
          <owningFaction>$permitFaction</owningFaction>
          <hideControls>true</hideControls>
        </li>
        <li Class="QuestNode_AddContentsToShuttle">
          <shuttle>$arrivalShuttle</shuttle>
          <contents>$laborers</contents>
        </li>
        <li Class="QuestNode_SpawnSkyfaller">
          <skyfallerDef>ShuttleIncoming</skyfallerDef>
          <innerThings>$arrivalShuttle</innerThings>
          <lookForSafeSpot>True</lookForSafeSpot>
          <tryLandInShipLandingZone>True</tryLandInShipLandingZone>
        </li>
        <li Class="QuestNode_Letter">
          <label TKey="LetterLabelLaborersArrived">Laborers arrived</label>
          <text TKey="LetterTextLaborersArrived">The laborers from [permitFaction_name] have arrived. A shuttle will come to collect them in [laborersDurationDays] days.</text>
          <lookTargets>$laborers</lookTargets>
          <filterDeadPawnsFromLookTargets>True</filterDeadPawnsFromLookTargets>
        </li>
        <!-- Arrival shuttle is destroyed -->
        <li Class="QuestNode_Signal">
          <inSignal>arrivalShuttle.Destroyed</inSignal>
          <node Class="QuestNode_ChangeFactionGoodwill">
            <faction>$permitFaction</faction>
            <change>$goodwillChangeOnShuttleDestroyed</change>
          </node>
        </li>

        <!-- Departure shuttle -->
        <li Class="QuestNode_ShuttleDelay">
          <delayTicks>$($laborersDurationDays * 60000)</delayTicks>
          <lodgers>$laborers</lodgers>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_GenerateShuttle">
                <requiredPawns>$laborers</requiredPawns>
                <storeAs>shuttle</storeAs>
              </li>
              <li Class="QuestNode_SpawnSkyfaller">
                <skyfallerDef>ShuttleIncoming</skyfallerDef>
                <innerThings>$shuttle</innerThings>
                <tryLandInShipLandingZone>True</tryLandInShipLandingZone>
                <lookForSafeSpot>True</lookForSafeSpot>
              </li>
              <li Class="QuestNode_SendShuttleAwayOnCleanup">
                <shuttle>$shuttle</shuttle>
              </li>
              <li Class="QuestNode_InspectString">
                <targets>$laborers</targets>
                <inspectString TKey="InspectStringDepartShuttle">Should depart on shuttle</inspectString>
              </li>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelShuttleArrived">Shuttle arrived</label>
                <text TKey="LetterTextShuttleArrivedForLaborers">A shuttle has arrived to collect the laborers from [permitFaction_name].</text>
                <lookTargets>$shuttle</lookTargets>
              </li>
              <li Class="QuestNode_ShuttleLeaveDelay">
                <delayTicks>$(1*60000)</delayTicks>
                <shuttle>$shuttle</shuttle>
                <node Class="QuestNode_Sequence">
                  <nodes>
                    <li Class="QuestNode_SendShuttleAway">
                      <shuttle>$shuttle</shuttle>
                    </li>
                    <li Class="QuestNode_End"/>
                  </nodes>
                </node>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Goodwill penalty for laborer killed or not on shuttle -->
        <li Class="QuestNode_Set">
          <name>goodwillPenaltyPawn</name>
          <value>-12</value>
        </li>
        <!-- Goodwill penalty for shuttle destruction -->
        <li Class="QuestNode_Set">
          <name>goodwillChangeOnShuttleDestroyed</name>
          <value>-25</value>
        </li>

        <!-- Laborer killed: Goodwill impact. Don't end quest. -->
        <li Class="QuestNode_Signal">
          <inSignal>laborers.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_Letter">
                <label TKey="LetterLabelLaborerDied">Laborer died: {SUBJECT_definite}</label>
                <text TKey="LetterTextLaborerDied">A laborer sent to you by [permitFaction_name] has died. Your goodwill with [permitFaction_name] has fallen by [goodwillPenaltyPawn].</text>
              </li>
              <li Class="QuestNode_ChangeFactionGoodwill">
                <faction>$permitFaction</faction>
                <change>$goodwillPenalty</change>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Missing laborers on departure shuttle. Goodwill impact -->
        <li Class="QuestNode_ChangeGoodwillForAlivePawnsMissingFromShuttle">
          <inSignal>shuttle.SentUnsatisfied</inSignal>
          <pawns>$laborers</pawns>
          <faction>$permitFaction</faction>
          <goodwillChange>$goodwillPenaltyPawn</goodwillChange> <!-- Per missing laborer -->
          <reason TKey="GoodwillChangeReasonLaborersMissedShuttle">laborers missed shuttle</reason>
        </li>

        <!-- - - - - - - -  -->
        <!--      End       -->
        <!-- - - - - - - -  -->

        <!-- Departure shuttle is destroyed -->
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.Destroyed</inSignal>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_ChangeFactionGoodwill">
                <faction>$permitFaction</faction>
                <change>$goodwillChangeOnShuttleDestroyed</change>
              </li>
              <li Class="QuestNode_End" />
            </nodes>
          </node>
        </li>

        <!-- Shuttle sent -->
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.SentUnsatisfied</inSignal>
          <node Class="QuestNode_End" />
        </li>
        <li Class="QuestNode_Signal">
          <inSignal>shuttle.SentSatisfied</inSignal>
          <node Class="QuestNode_End" />
        </li>

        <!-- End if the permit's faction becomes hostile -->
        <li Class="QuestNode_Signal">
          <inSignal>permitFaction.BecameHostileToPlayer</inSignal>
          <node Class="QuestNode_End" />
        </li>

      </nodes>
    </root>
  </QuestScriptDef>

</Defs>